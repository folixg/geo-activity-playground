{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Recording all my outside activities with a GPS tracker has led to a pretty big data collection. Using Strava one can already take a look at this data and have a place to store it. On Statshunters there are some nice analyses of the data, for instance regarding explorer tiles.</p> <p>This project here provides some additional analyses of the data. It is not meant to be comprehensible, rather just to satisfy my curiosity.</p>"},{"location":"directory-layout/","title":"Directory Layout","text":"<p>There are a bunch of files that need to be given to this set of scripts, are used as intermediate files or generated as output. In order to make it clear where everything is, the following document lists all the paths which are relevant to the script.</p> <p>Everything is relative to a base directory which can be passed with the <code>--basedir</code> option to the scripts.</p>"},{"location":"directory-layout/#input","title":"Input","text":"<p>The user has to put data into the following directories in order for it to be picked up.</p> <ul> <li> <p><code>Strava Export</code>: Contains the exported data from Strava.</p> </li> <li> <p><code>config.toml</code>: Configuration file</p> </li> </ul>"},{"location":"directory-layout/#output-and-cache","title":"Output and cache","text":"<p>The following directories serve as a cache. One can inspect this but doesn't need to work with that directly.</p> <ul> <li> <p><code>Explorer</code>: Things related to the explorer tiles.</p> <ul> <li><code>Per Activity</code>: A data frame with the tiles that have been visited within each activity. Each file is named with the activity ID like <code>2520340514.parquet</code>. The columns are <code>time</code>, <code>tile_x</code>, <code>tile_y</code>.</li> <li><code>first_time_per_tile.parquet</code>: A data frame with the first visit datetime for each explorer tile. Columns <code>time</code>, <code>tile_x</code>, <code>tile_y</code>.</li> <li><code>missing_tiles.geojson</code>: A GeoJSON file with square polygons for all missing tiles at the boundary of explored tiles.</li> <li><code>missing_tiles.gpx</code>: The same, just expressed as square tracks in the GPX format.</li> </ul> </li> <li> <p><code>Heatmaps</code>: Will contain heatmap images generated from the data. They will be called like <code>Cluster-1.png</code> with increasing numbers. When one re-generates the heatmaps, the old files will be deleted to make sure that even if the numbers of clusters has been reduced there are no old files remaining.</p> </li> <li> <p><code>Open Street Map Tiles</code>: Cached tiles from the Open Street Map. The substructure is <code>zoom/x/y.png</code>. Each image has a size of 256\u00d7256 pixels.</p> </li> <li> <p><code>Strava API</code>: Everything that is downloaded via the Strava API is stored in this subtree.</p> <ul> <li><code>Data</code>: The time series data for each activity as a data frame stored in the Parquet format. Filenames are <code>2589868806.parquet</code> with the activity IDs. The column names are the following: <code>time</code>, <code>latitude</code>, <code>longitude</code> and optionally <code>distance</code>, <code>altitude</code>, <code>heartrate</code>.</li> <li><code>Metadata</code>: The activity objects from the <code>stravalib</code> Python library are stored here as Python pickle objects. The file names are time stamp of the activity start, like <code>start-1364228189.pickle</code>.</li> <li><code>strava_tokens.json</code>: Tokens for the Strava API. Contains the access and refresh tokens.</li> </ul> </li> <li> <p><code>Strava Export Cache</code>:</p> <ul> <li><code>Activities</code>: Same as <code>Strava API/Data</code>.</li> </ul> </li> </ul>"},{"location":"heatmaps/","title":"Heatmaps","text":"<p>From all the points in your activities, one can generate nice heatmaps. This builds on the Strava local heatmap code.</p> <p>We don't generate a single heatmap for all your activities as this will not look great as soon as you have done an activity away from home. Rather we use a clustering algorithm to find all disjoint geographical clusters in your activities and generate one heatmap per cluster.</p> <p>For instance the heatmap generated from all my activities in the Randstad in the Netherlands:</p> <p></p>"}]}